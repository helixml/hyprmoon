# HyprMoon using Ubuntu's packaged Hyprland (proven to work in helix)
FROM ubuntu:25.04

# Install base packages (exactly like helix)
RUN apt-get update && apt-get install -y \
    wget curl ca-certificates gnupg software-properties-common \
    git cmake build-essential \
    libcurl4-openssl-dev libssl-dev \
    libudev-dev libpci-dev jq \
    && rm -rf /var/lib/apt/lists/*

# Install Wayland compositor and VNC server with GPU support (exactly like helix)
RUN apt-get update && apt-get install -y \
    wayvnc cage sway-backgrounds weston \
    # Install Ubuntu's packaged Hyprland (this definitely works in helix)
    && apt-get install -y hyprland \
    # Add moonlight dependencies for our integration
    && apt-get install -y \
    libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
    libgstreamer-plugins-bad1.0-dev gstreamer1.0-plugins-base \
    gstreamer1.0-plugins-good gstreamer1.0-plugins-bad \
    gstreamer1.0-plugins-ugly gstreamer1.0-libav \
    gstreamer1.0-tools libgstreamer-gl1.0-0 \
    libenet-dev libssl-dev libfmt-dev \
    libboost-system-dev libboost-filesystem-dev \
    pkg-config wlroots-dev ninja-build \
    # Basic utilities (like helix)
    && apt-get install -y \
    bc coreutils cmake curl rsync wget ripgrep jq meson xdg-user-dirs unzip \
    fontconfig eza fish kitty \
    glib2.0-bin wl-clipboard translate-shell \
    pipewire-audio pulseaudio-utils alsa-utils \
    python3 python3-pip python3-venv \
    wget git unzip curl sqlite3 ca-certificates \
    build-essential cmake \
    nodejs npm python3 python3-pip \
    # Intel/Mesa GPU drivers (exactly like helix)
    va-driver-all intel-media-va-driver-non-free \
    libva-drm2 libva-x11-2 libvpl2 \
    # Core Mesa/OpenGL libraries for GPU acceleration (exactly like helix)
    mesa-utils mesa-utils-extra \
    libgl1-mesa-dri libglx-mesa0 \
    libegl-mesa0 libgles2-mesa-dev \
    libgbm1 libdrm2 \
    # Hardware detection tools and kernel module support (exactly like helix)
    pciutils lshw usbutils kmod libkmod2 \
    # Wayland display protocol libraries (exactly like helix)
    libwayland-dev libwayland-server0 libinput-dev libxkbcommon-dev \
    # Runtime dependencies (exactly like helix)
    libfontconfig1 libfreetype6 libxcb1 libxcb-render0 libxcb-shape0 \
    libxcb-xfixes0 libxcb-shm0 libxkbcommon0 libxkbcommon-x11-0 \
    libasound2t64 libssl3 libgtk-3-0 libgdk-pixbuf2.0-0 libpango-1.0-0 libcairo2 \
    # DBus and session management (exactly like helix)
    dbus-x11 dbus \
    # XWayland for X11 app compatibility (exactly like helix)
    xwayland \
    # Additional tools (exactly like helix)
    supervisor nano vim \
    && rm -rf /var/lib/apt/lists/*

# Add NVIDIA CUDA runtime libraries for GPU acceleration (exactly like helix)
RUN apt-get update -y && \
    apt-get install -y unzip curl && \
    cd /tmp && \
    curl -fsSL -o nvidia_cuda_nvrtc_linux_x86_64.whl "https://developer.download.nvidia.com/compute/redist/nvidia-cuda-nvrtc/nvidia_cuda_nvrtc-11.0.221-cp36-cp36m-linux_x86_64.whl" && \
    unzip -joq -d ./nvrtc nvidia_cuda_nvrtc_linux_x86_64.whl && \
    cd nvrtc && \
    chmod 755 libnvrtc* && \
    find . -maxdepth 1 -type f -name "*libnvrtc.so.*" -exec sh -c 'ln -snf $(basename {}) libnvrtc.so' \; && \
    mkdir -p /usr/local/nvidia/lib && \
    mv -f libnvrtc* /usr/local/nvidia/lib && \
    rm -rf /tmp/* && \
    echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf && \
    echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf && \
    ldconfig && \
    apt-get remove -y --purge unzip curl && \
    rm -rf /var/lib/apt/lists/*

# Configure ubuntu user for Wayland sessions (exactly like helix)
RUN useradd -m -s /bin/bash ubuntu && echo 'ubuntu:helix123' | chpasswd && usermod -aG sudo ubuntu && \
    groupadd -f -g 992 render && usermod -aG video,render ubuntu

# Build our moonlight integration as a plugin/library
COPY . /workspace/hyprmoon
WORKDIR /workspace/hyprmoon

# Build ONLY our moonlight components as a shared library
RUN echo "Building moonlight integration library..." && \
    mkdir -p /usr/local/lib/hyprmoon && \
    # Compile our moonlight sources into a shared library
    meson setup build --prefix=/usr/local --buildtype=release \
        --default-library=shared \
        -Dwith_moonlight=true \
        -Dbuild_hyprland=false && \
    ninja -C build && \
    # Install our moonlight library (not Hyprland itself)
    ninja -C build install && \
    echo "Moonlight integration library installed"

# Copy helix's proven startup scripts
COPY start-wayland-vnc.sh /start-wayland-vnc.sh
COPY start-ubuntu-session.sh /start-ubuntu-session-moonlight.sh
RUN chmod +x /start-wayland-vnc.sh /start-ubuntu-session-moonlight.sh

# Modify the ubuntu session script to use Ubuntu's Hyprland + our moonlight library
RUN sed -i 's|/usr/bin/Hyprland|LD_PRELOAD="/usr/local/lib/hyprmoon/libhyprmoon.so" /usr/bin/Hyprland|g' /start-ubuntu-session-moonlight.sh

# Environment variables for Wayland (exactly like helix)
ENV WAYLAND_DISPLAY=wayland-0 \
    XDG_RUNTIME_DIR=/tmp/runtime-ubuntu \
    WLR_RENDERER=gles2 \
    WLR_BACKENDS=headless \
    VNC_PASSWORD=helix123

# Expose VNC port and Wolf moonlight ports
EXPOSE 5901 3030
EXPOSE 48989/tcp 49010/tcp 48999/tcp

# Start Wayland VNC (exactly like helix)
ENTRYPOINT ["/start-wayland-vnc.sh"]